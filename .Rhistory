cube <- function(x,n){ x^3}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
?lapply
##  run_analysis.R
## The following code is created for collect and clean a data set. The data set is obtained from
## http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
## The data represent data collected from the accelerometers from the Samsung Galaxy S smartphone.
## I was not sure how I should interprate the instructions, therefore the code does:
## Merges the training and the test
# 1. Merges the training and the test sets to create one data set.
# 2. From the data set extracts only the measurements on the mean and standard deviation for each measurement.
# 3. Then uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. Creates a second, independent tidy data set from the previous table. That one contains the average of each variable for each activity and each subject.
# I understand that I should use only the measurements on mean and sd for all the project. In fact it is more or less the same code except one step.
## Set working directory
#setwd("/Users/ac/Desktop/UZER/kursera/datasajensspec/gettingdata/projekt/")
#####
##Read files##
#####
### Get file names:
names0 <- c('features','activity_labels')
names1 <- c('X_test', 'y_test', 'subject_test')
names2 <- c('X_train', 'y_train','subject_train')
###Load all files
for(i in names0){
filepath <- file.path(".",paste(i,".txt",sep=""))
assign(i, read.table(filepath, sep = "",colClasses=c("integer", "character")))
}
for(i in names1){
filepath <- file.path("./test",paste(i,".txt",sep=""))
assign(i, read.table(filepath,header = FALSE, fill = TRUE, sep = ""))
}
for(i in names2){
filepath <- file.path("./train",paste(i,".txt",sep=""))
assign(i, read.table(filepath,header = FALSE, fill = TRUE, sep = ""))
}
#####
## MERGE FILES
#####
X <- rbind(X_test, X_train)
Y <- rbind(y_test, y_train)
subject <- rbind(subject_test, subject_train)
#####
## Extracts mean and sd
####
#mean_std_inx <- grep("[Mm]ean\\(\\) || [Ss]td\\(\\)",features[[2]])
# In case of separated indices:
means_inx <- grep("[Mm]ean",features[[2]])
stds_inx <- grep("[Ss]td\\(\\)",features[[2]])
mean_std_inx <- c(means_inx,stds_inx)
part_data <- X[,mean_std_inx]
######
## Use descriptive activity labels
######
# Add only label to the data used
activity_table_part <- cbind(Y,subject,part_data)
#Prepare for merging
colnames(activity_table_part) <- c("Y","subject",features[mean_std_inx,2])
colnames(activity_labels) <- c("Y","Activity")
# Merge labels with activity index
activity_table_p_n<- merge(activity_labels,activity_table_part,by="Y")
activity_table_part_names <- activity_table_p_n[,-1]
# In case of all needed data set
#activity_table_full_names <- cbind(act_labels[[2]],X)
#activity_table_pfull_names <- cbind(act_labels[[2]],X)
######
## Add descriptive variable names
######
# Copy for debugging mode
activity_table0<-activity_table_part_names
# Prepare for merging
colnames(activity_table_part_names) <- c("Activity","Subject Performing",features[mean_std_inx,2])
# In case of all the data needed to be named
#colnames(activity_table_full_names) <- c("Activity",features[[2]]
#####
## Tidy data for averaging
#####
pre_tidy_set1 <- aggregate.data.frame(activity_table_part_names, list(activity_table_part_names$Activity,activity_table_part_names$`Subject Performing`), mean)
# Remove "old" rows
pre_tidy_set2 <- pre_tidy_set1[-c(3,4)]
# Prepare activity names
activities_names <- features[mean_std_inx,2]
raw_names <- c("tBody","tGravity","fBody","fGravity","-mean()-","-std()-","-mean()","-std()")
new_names <- c("Time.Body","Time.Gravity","FFT.Body","FFT.Gravity",".Mean.",".Std.",".Mean",".Std")
for (i in 1:length(raw_names))
{
activities_names <- gsub(raw_names[i],new_names[i],activities_names,fixed=TRUE)
}
# Rename new columns from aggregation
pre_tidy_set3<- pre_tidy_set2
colnames(pre_tidy_set3) <- c("Activity","Subject Performing",activities_names)
#Rename other variables for "tidy data"
tidy_set_averages <- pre_tidy_set3
# Final tidy product: write
write.table(tidy_set_averages,file="tidy.txt",row.name=FALSE )
getwd
getwd()
##  run_analysis.R
## The following code is created for collect and clean a data set. The data set is obtained from
## http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
## The data represent data collected from the accelerometers from the Samsung Galaxy S smartphone.
## I was not sure how I should interprate the instructions, therefore the code does:
## Merges the training and the test
# 1. Merges the training and the test sets to create one data set.
# 2. From the data set extracts only the measurements on the mean and standard deviation for each measurement.
# 3. Then uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. Creates a second, independent tidy data set from the previous table. That one contains the average of each variable for each activity and each subject.
# I understand that I should use only the measurements on mean and sd for all the project. In fact it is more or less the same code except one step.
## Set working directory
#setwd("/Users/ac/Desktop/UZER/kursera/datasajensspec/gettingdata/projekt/")
#####
##Read files##
#####
### Get file names:
names0 <- c('features','activity_labels')
names1 <- c('X_test', 'y_test', 'subject_test')
names2 <- c('X_train', 'y_train','subject_train')
###Load all files
for(i in names0){
filepath <- file.path(".",paste(i,".txt",sep=""))
assign(i, read.table(filepath, sep = "",colClasses=c("integer", "character")))
}
for(i in names1){
filepath <- file.path("./test",paste(i,".txt",sep=""))
assign(i, read.table(filepath,header = FALSE, fill = TRUE, sep = ""))
}
for(i in names2){
filepath <- file.path("./train",paste(i,".txt",sep=""))
assign(i, read.table(filepath,header = FALSE, fill = TRUE, sep = ""))
}
#####
## MERGE FILES
#####
X <- rbind(X_test, X_train)
Y <- rbind(y_test, y_train)
subject <- rbind(subject_test, subject_train)
#####
## Extracts mean and sd
####
#mean_std_inx <- grep("[Mm]ean\\(\\) || [Ss]td\\(\\)",features[[2]])
# In case of separated indices:
means_inx <- grep("[Mm]ean",features[[2]])
stds_inx <- grep("[Ss]td\\(\\)",features[[2]])
mean_std_inx <- c(means_inx,stds_inx)
part_data <- X[,mean_std_inx]
######
## Use descriptive activity labels
######
# Add only label to the data used
activity_table_part <- cbind(Y,subject,part_data)
#Prepare for merging
colnames(activity_table_part) <- c("Y","subject",features[mean_std_inx,2])
colnames(activity_labels) <- c("Y","Activity")
# Merge labels with activity index
activity_table_p_n<- merge(activity_labels,activity_table_part,by="Y")
activity_table_part_names <- activity_table_p_n[,-1]
# In case of all needed data set
#activity_table_full_names <- cbind(act_labels[[2]],X)
#activity_table_pfull_names <- cbind(act_labels[[2]],X)
######
## Add descriptive variable names
######
# Copy for debugging mode
activity_table0<-activity_table_part_names
# Prepare for merging
colnames(activity_table_part_names) <- c("Activity","Subject Performing",features[mean_std_inx,2])
# In case of all the data needed to be named
#colnames(activity_table_full_names) <- c("Activity",features[[2]]
#####
## Tidy data for averaging
#####
pre_tidy_set1 <- aggregate.data.frame(activity_table_part_names, list(activity_table_part_names$Activity,activity_table_part_names$`Subject Performing`), mean)
# Remove "old" rows
pre_tidy_set2 <- pre_tidy_set1[-c(3,4)]
# Prepare activity names
activities_names <- features[mean_std_inx,2]
raw_names <- c("tBody","tGravity","fBody","fGravity","-mean()-","-std()-","-mean()","-std()")
new_names <- c("Time.Body","Time.Gravity","FFT.Body","FFT.Gravity",".Mean.",".Std.",".Mean",".Std")
for (i in 1:length(raw_names))
{
activities_names <- gsub(raw_names[i],new_names[i],activities_names,fixed=TRUE)
}
# Rename new columns from aggregation
pre_tidy_set3<- pre_tidy_set2
colnames(pre_tidy_set3) <- c("Activity","Subject Performing",activities_names)
#Rename other variables for "tidy data"
tidy_set_averages <- pre_tidy_set3
# Final tidy product: write
write.table(tidy_set_averages,file="tidy.txt",row.name=FALSE )
##  run_analysis.R
## The following code is created for collect and clean a data set. The data set is obtained from
## http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
## The data represent data collected from the accelerometers from the Samsung Galaxy S smartphone.
## I was not sure how I should interprate the instructions, therefore the code does:
## Merges the training and the test
# 1. Merges the training and the test sets to create one data set.
# 2. From the data set extracts only the measurements on the mean and standard deviation for each measurement.
# 3. Then uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. Creates a second, independent tidy data set from the previous table. That one contains the average of each variable for each activity and each subject.
## Set working directory
#setwd("/Users/ac/Desktop/UZER/kursera/datasajensspec/gettingdata/projekt/")
#####
##Read files##
#####
### Get file names:
names0 <- c('features','activity_labels')
names1 <- c('X_test', 'y_test', 'subject_test')
names2 <- c('X_train', 'y_train','subject_train')
###Load all files
for(i in names0){
filepath <- file.path(".",paste(i,".txt",sep=""))
assign(i, read.table(filepath, sep = "",colClasses=c("integer", "character")))
}
for(i in names1){
filepath <- file.path("./test",paste(i,".txt",sep=""))
assign(i, read.table(filepath,header = FALSE, fill = TRUE, sep = ""))
}
for(i in names2){
filepath <- file.path("./train",paste(i,".txt",sep=""))
assign(i, read.table(filepath,header = FALSE, fill = TRUE, sep = ""))
}
#####
## MERGE FILES
#####
X <- rbind(X_test, X_train)
Y <- rbind(y_test, y_train)
subject <- rbind(subject_test, subject_train)
#####
## Extracts mean and sd
####
#mean_std_inx <- grep("[Mm]ean\\(\\) || [Ss]td\\(\\)",features[[2]])
# In case of separated indices:
means_inx <- grep("[Mm]ean",features[[2]])
stds_inx <- grep("[Ss]td\\(\\)",features[[2]])
mean_std_inx <- c(means_inx,stds_inx)
part_data <- X[,mean_std_inx]
######
## Use descriptive activity labels
######
# Add only label to the data used
activity_table_part <- cbind(Y,subject,part_data)
#Prepare for merging
colnames(activity_table_part) <- c("Y","subject",features[mean_std_inx,2])
colnames(activity_labels) <- c("Y","Activity")
# Merge labels with activity index
activity_table_p_n<- merge(activity_labels,activity_table_part,by="Y")
activity_table_part_names <- activity_table_p_n[,-1]
# In case of all needed data set
#activity_table_full_names <- cbind(act_labels[[2]],X)
#activity_table_pfull_names <- cbind(act_labels[[2]],X)
######
## Add descriptive variable names
######
# Copy for debugging mode
activity_table0<-activity_table_part_names
# Prepare for merging
colnames(activity_table_part_names) <- c("Activity","Subject Performing",features[mean_std_inx,2])
# In case of all the data needed to be named
#colnames(activity_table_full_names) <- c("Activity",features[[2]]
#####
## Tidy data for averaging
#####
pre_tidy_set1 <- aggregate.data.frame(activity_table_part_names, list(activity_table_part_names$Activity,activity_table_part_names$`Subject Performing`), mean)
# Remove "old" rows
pre_tidy_set2 <- pre_tidy_set1[-c(3,4)]
# Prepare activity names
activities_names <- features[mean_std_inx,2]
raw_names <- c("tBody","tGravity","fBody","fGravity","-mean()-","-std()-","-mean()","-std()")
new_names <- c("Time.Body","Time.Gravity","FFT.Body","FFT.Gravity",".Mean.",".Std.",".Mean",".Std")
for (i in 1:length(raw_names))
{
activities_names <- gsub(raw_names[i],new_names[i],activities_names,fixed=TRUE)
}
# Rename new columns from aggregation
pre_tidy_set3<- pre_tidy_set2
colnames(pre_tidy_set3) <- c("Activity","Subject Performing",activities_names)
#Rename other variables for "tidy data"
tidy_set_averages <- pre_tidy_set3
# Final tidy product: write
write.table(tidy_set_averages,file="tidy.txt",row.name=FALSE )
View(tidy_set_averages)
View(features)
activities_names
write(activities_names, file="activities.txt")
gwiazdy <- rep("*",86)
cbind(gwiazdy,activities_names)
ww <- cbind(gwiazdy,activities_names)
write(ww, file="activities.txt")
t(ww)
write(t(ww), file="activities.txt")
raw_names
new_names
## Set working directory
setwd("/Users/ac/Desktop/UZER/kursera/datasajensspec/repres/RepData_PeerAssessment1/")
#library(dplyr)
activity <- read.csv(unz("activity.zip", "activity.csv"), stringsAsFactors=FALSE,na.strings="Not Available",header = TRUE, fill = TRUE, sep = ",")
activity[, 1]  <- as.numeric(activity[, 1])
activity[, 2]  <- as.Date(activity[, 2])
activity[, 3]  <- as.numeric(activity[, 3])
sum_act <- aggregate.data.frame(activity[1], by = list(activity[,2]), FUN=sum, na.rm=TRUE)
colnames(sum_act) <- c("Date","Total number of steps")
barplot(sum_act$`Total number of steps`, space=0, axisnames = TRUE, ylab="Number of steps", xlab = "Following day")
mean_act <- aggregate.data.frame(activity[1], by = list(activity[,2]), FUN=mean, na.rm=TRUE)
colnames(mean_act) <- c("Date","Mean")
mean_act
median_act <- aggregate.data.frame(activity[1], by = list(activity[,2]), FUN=median, na.rm=TRUE)
colnames(median_act) <- c("Date","Median")
median_act
#plot(activity$steps, type="l", xlab="Time", ylab= "Steps", col="green" , lwd=1)
plot(mean_act$Mean, type="l", xlab="Time", ylab= "Steps", col="green" , lwd=1)
maxsteps <- max(activity$steps, na.rm = TRUE)
maxsteps
activity$interval[which(activity$steps == maxsteps)]
activity[which(activity$steps == maxsteps),]
nas <- sum(is.na(activity$steps))
percentage <- nas/length(activity[,1])*100
percentage
nas <- sum(is.na(activity$steps))
nas
percentage <- nas/length(activity[,1])*100
percentage
newsetstep <- rep(0,length(activity[,1]))
newset2 <- cbind(newsetstep, as.Date(activity$date), activity$interval)
newset3 <- activity
for (i in 1:length(activity[,1]))
{
if (is.na(newset3[i,1] == TRUE) )
{
meanstep <- mean_act$steps[which(as.Date(mean_act$Date) == as.Date(newset3[i,2]))]
if (is.null(meanstep) == FALSE) {newset3[i,1] = meanstep}
else newset3[i,1] = 0
}
else newset3[i,1] = activity[i,1]
}
sum_new <- aggregate.data.frame(newset3[1], by = list(newset3[,2]), FUN=sum, na.rm=TRUE)
colnames(sum_new) <- c("Date","Total number of steps")
barplot(sum_new$`Total number of steps`, space=0, axisnames = TRUE, ylab="Number of steps", xlab = "Following day")
par(mfcol=c(2,1))
barplot(sum_act$`Total number of steps`, space=0, axisnames = TRUE, ylab="Steps with NA", xlab = "Following day")
barplot(sum_new$`Total number of steps`, space=0, axisnames = TRUE, ylab="Steps without NA", xlab = "Following day")
mean_new <- aggregate.data.frame(newset3[1], by = list(newset3[,2]), FUN=mean, na.rm=TRUE)
colnames(mean_new) <- c("Date","Mean")
mean_new
median_new <- aggregate.data.frame(newset3[1], by = list(newset3[,2]), FUN=median, na.rm=TRUE)
colnames(median_new) <- c("Date","Median")
median_new
## Reframe:
days1 <- weekdays(as.Date(newset3$date), abbreviate = TRUE);
days2 <- gsub("Sun|Sat", "weekend",days1)
days3 <- gsub("Mon|Tue|Wed|Thu|Fri", "weekday",days2)
week_days <- cbind(newset3$steps,  days3, newset3$interval,newset3$date)
colnames(week_days) <- c("steps","week or end","intervals","date")
week_days2 <- data.frame(week_days)
adays1 <- weekdays(mean_new$Date, abbreviate = TRUE);
adays2 <- gsub("Sun|Sat", "weekend",adays1)
adays3 <- gsub("Mon|Tue|Wed|Thu|Fri", "weekday",adays2)
aweek_days <- cbind(mean_new$Mean,  adays3)
colnames(aweek_days) <- c("steps","week or end")
aweek_days2 <- data.frame(aweek_days)
anormaldays <- aweek_days2[which(aweek_days2$week.or.end=="weekday"),]
aweekends <- aweek_days2[which(aweek_days2$week.or.end=="weekend"),]
lpw <- c(1:length(aweekends[,1]))
lpd <- c(1:length(anormaldays[,1]))
par(mfrow=c(2,1))
plot( t(lpw), t(aweekends[1]), type="l", xlab="Time", ylab= "Steps", col="green" , lwd=1,main="weekends")
plot( t(lpd), t(anormaldays[1]), type="l", xlab="Time", ylab= "Steps", col="red" , lwd=1,main="weekdays")
